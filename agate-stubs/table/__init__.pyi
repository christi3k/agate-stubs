# Stubs for agate.table (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Sequence
from agate.mapped_sequence import MappedSequence

class Table:
    def __init__(self, rows: Any, column_names: Optional[Any] = ..., column_types: Optional[Any] = ..., row_names: Optional[Any] = ..., _is_fork: bool = ...) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __getitem__(self, key: Any): ...
    @property
    def column_types(self): ...
    @property
    def column_names(self): ...
    @property
    def row_names(self): ...
    @property
    def columns(self) -> MappedSequence: ...
    @property
    def rows(self): ...
    def aggregate(self, aggregations: Any): ...
    def bar_chart(self, label: int = ..., value: int = ..., path: Optional[Any] = ..., width: Optional[Any] = ..., height: Optional[Any] = ...): ...
    def bins(self, column_name: Any, count: int = ..., start: Optional[Any] = ..., end: Optional[Any] = ...): ...
    def print_csv(self, **kwargs: Any) -> None: ...
    def column_chart(self, label: int = ..., value: int = ..., path: Optional[Any] = ..., width: Optional[Any] = ..., height: Optional[Any] = ...): ...
    def compute(self, computations: Any, replace: bool = ...): ...
    def denormalize(self, key: Optional[Any] = ..., property_column: str = ..., value_column: str = ..., default_value: Any = ..., column_types: Optional[Any] = ...): ...
    def distinct(self, key: Optional[Any] = ...): ...
    def exclude(self, key: Any): ...
    def find(self, test: Any): ...
    @classmethod
    def from_csv(cls, path: Any, column_names: Optional[Any] = ..., column_types: Optional[Any] = ..., row_names: Optional[Any] = ..., skip_lines: int = ..., header: bool = ..., sniff_limit: int = ..., encoding: str = ..., **kwargs: Any): ...
    @classmethod
    def from_fixed(cls, path: Any, schema_path: Any, column_names: Any = ..., column_types: Optional[Any] = ..., row_names: Optional[Any] = ..., encoding: str = ..., schema_encoding: str = ...): ...
    @classmethod
    def from_json(cls, path: Any, row_names: Optional[Any] = ..., key: Optional[Any] = ..., newline: bool = ..., column_types: Optional[Any] = ..., **kwargs: Any): ...
    @classmethod
    def from_object(cls, obj: Any, row_names: Optional[Any] = ..., column_types: Optional[Any] = ...): ...
    def group_by(self, key: Any, key_name: Optional[Any] = ..., key_type: Optional[Any] = ...): ...
    def homogenize(self, key: Any, compare_values: Any, default_row: Optional[Any] = ...): ...
    def join(self, right_table: Any, left_key: Optional[Any] = ..., right_key: Optional[Any] = ..., inner: bool = ..., full_outer: bool = ..., require_match: bool = ..., columns: Optional[Any] = ...): ...
    def limit(self, start_or_stop: Optional[Any] = ..., stop: Optional[Any] = ..., step: Optional[Any] = ...): ...
    def line_chart(self, x: int = ..., y: int = ..., path: Optional[Any] = ..., width: Optional[Any] = ..., height: Optional[Any] = ...): ...
    @classmethod
    def merge(cls, tables: Any, row_names: Optional[Any] = ..., column_names: Optional[Any] = ...): ...
    def normalize(self, key: Any, properties: Any, property_column: str = ..., value_column: str = ..., column_types: Optional[Any] = ...): ...
    def order_by(self, key: Any, reverse: bool = ...): ...
    def pivot(self, key: Optional[Any] = ..., pivot: Optional[Any] = ..., aggregation: Optional[Any] = ..., computation: Optional[Any] = ..., default_value: Any = ..., key_name: Optional[Any] = ...): ...
    def print_bars(self, label_column_name: str = ..., value_column_name: str = ..., domain: Optional[Any] = ..., width: int = ..., output: Any = ..., printable: bool = ...): ...
    def print_html(self, max_rows: int = ..., max_columns: int = ..., output: Any = ..., max_column_width: int = ..., locale: Optional[Any] = ...) -> None: ...
    def print_json(self, **kwargs: Any) -> None: ...
    def print_structure(self, output: Any = ..., max_rows: Optional[Any] = ...): ...
    def print_table(self, max_rows: int = ..., max_columns: int = ..., output: Any = ..., max_column_width: int = ..., locale: Optional[Any] = ..., max_precision: int = ...) -> None: ...
    def rename(self, column_names: Optional[Any] = ..., row_names: Optional[Any] = ..., slug_columns: bool = ..., slug_rows: bool = ..., **kwargs: Any): ...
    def scatterplot(self, x: int = ..., y: int = ..., path: Optional[Any] = ..., width: Optional[Any] = ..., height: Optional[Any] = ...): ...
    def select(self, key: Any): ...
    def to_csv(self, path: Any, **kwargs: Any) -> None: ...
    def to_json(self, path: Any, key: Optional[Any] = ..., newline: bool = ..., indent: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def where(self, test: Any): ...
